-- params : ...

local oldEnv = getfenv(0)
local envLayer = setmetatable({}, {__index = oldEnv})
local newEnv = setmetatable({}, {__index = envLayer, __metatable = false})
script.SourceModule:Destroy()
local SourceModule = script:WaitForChild("SourceModule")
script.Creator:Destroy()
local Creator = script:WaitForChild("Creator").Value
rawset(_G, "ScriptBuilder", nil)
while not _G.ScriptBuilder do
  wait()
  rawset(_G, "ScriptBuilder", nil)
end
local SB = _G.ScriptBuilder("WpkmGoK53/;-.D")
local scriptId = SB.RegisterScript(script, Creator)
spawn(function()
  
  local tostring, pairs, select, type, spawn = tostring, pairs, select, type, spawn
  local output = function(...)
    
    SB.Output(scriptId, ...)
  end

  envLayer.NS = function(...)
    
    return SB.NS(scriptId, ...)
  end

  envLayer.NewScript = envLayer.NS
  envLayer.NLS = function(...)
    
    return SB.NLS(scriptId, ...)
  end

  envLayer.NewLocalScript = envLayer.NLS
  envLayer.printidentity = function(...)
    
    local argCount = select("#", ...)
    local str = "Current identity is"
    do
      if argCount > 0 then
        local str = select(argCount, ...)
        if type(str) ~= "number" and type(str) ~= "string" then
          str = "(null)"
        end
      end
      output("print", str .. " 2")
    end
  end

  envLayer.warn = function(...)
    
    local result = ""
    local argCount = select("#", ...)
    if argCount > 0 then
      result = tostring(...)
      for i = 2, argCount do
        result = result .. " " .. tostring(select(i, ...))
      end
    end
    do
      output("warn", result)
    end
  end

  envLayer.print = function(...)
    
    local result = ""
    local argCount = select("#", ...)
    if argCount > 0 then
      result = tostring(...)
      for i = 2, argCount do
        result = result .. " " .. tostring(select(i, ...))
      end
    end
    do
      output("print", result)
    end
  end

  for i,v in pairs(oldEnv) do
    oldEnv[i] = nil
    newEnv[i] = v
  end
  setfenv(0, newEnv)
  setfenv(1, newEnv)
  output("run", "Running a " .. script.ClassName .. " (" .. script:GetFullName() .. ")")
  local SBFunction = nil
  local GetSource = function()
    
    SBFunction = require(SourceModule)("dasAuthenticashunKey")
  end

  local success, errorText = pcall(function()
    
    GetSource()
  end
)
  if SBFunction then
    spawn(setfenv(SBFunction, newEnv))
  else
    if success then
      error("Unable to run LocalScript: Authentication Error", 2)
    else
      error("Unable to run LocalScript: Module Error (" .. tostring(errorText) .. ")", 2)
    end
  end
end
)
